#!/bin/sh


script_dir=$(dirname "$0")
# the reason why I am including this in every script
# is written down in initialHashFile.sh, go look there ig


file1=${1}
file2=${2}
# argument 1 is the older hash file that the script is 
# comparing to the newer hash file, file2


# I want this script to have default parameters in case
# one or more arguments were left out.by default, this script
# should compare the hashes of the two most recent hash files
# generated by initialHashFile.sh so that any changes can be 
# reported. the if -z "$file1" parts of the line below mean that
# the if statement will run if these args/params werent provided
if [ -z "$file1" ] || [ -z "$file2" ]; then

    # this gets all the hash files from this current directory
    # and uses -t to sort by newest/most recent modification
    recent_files=$(ls -t "${script_dir}"/hashes_*.txt)

    # this selects the 1st and 2nd newest hash files to be the 
    # file 1 and 2 parameters. sed is used to read each line of
    # the text that was echoed and return an edited version of it
    # (in this case, the version that just contains the file). 
    # the -n flag means it only specifically prints the lines I 
    # specified to it (disabled automatic printing)
    file2=$(echo "$recent_files" | sed -n '1p')
    file1=$(echo "$recent_files" | sed -n '2p')
fi

# apparently there is a very convenient command called diff 
# that automatically scans two files line by line and shows
# the differences. I thought I was gonna have to code that
# manually lol
# diff -q compares the two files in quiet mode, so it does 
# not print anything and only uses an exit code. and then
# the >/dev/null part suppresses any output so that the
# if statement can 
if diff -q "$file1" "$file2" >/dev/null 2>&1; then
    echo ":D files are the same!!! no changes :P"
    exit 0
    # the exit command obviously causes the script to exit. the 0
    # afterwards is the exit code. different exit codes mean different
    # things, and 0 means it was successful with no problems
else
    echo "Files do NOT match :( Detecting differences:" 
fi

# the flag -y displays the lines side by side, and 
# --suppress-common-lines makes sure that only the changed
# lines are listed. this makes it a lot easier for me to read 
# personally
diff -y --suppress-common-lines "$file1" "$file2"











